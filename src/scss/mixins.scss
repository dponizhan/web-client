@import 'variables';

/* https://material.io/guidelines/layout/responsive-ui.html#responsive-ui-breakpoints */
$x-small: 480px;
$small: 600px;
$tablet: 820px;
$medium: 1024px;
$x-medium: 1200px;
$large: 1440px;
$x-large: 1920px;

@mixin button () {
  display: flex;
  justify-content: center;
  align-items: center;
  border: none;
  padding: 0.8rem 1.6rem;
  font-size: 1.4rem;
  font-weight: 700;
  text-align: center;
  min-height: 3.6rem;
  background-color: transparent;

  &:not([disabled]) {
    cursor: pointer;
  }

  &[disabled] {
    cursor: default;
  }
}
@mixin button-icon () {
  @include button();

  padding: 0.5rem;
  min-width: 3.6rem;
  border-radius: 50%;
  transition: 0.3s ease-out;
  box-sizing: content-box;

  &:not([disabled]):hover {
    background-color: $col-button-flat-hover;
  }
}
@mixin button-raised () {
  @include button();

  border-radius: 0.2rem;
  background-color: $col-button-raised;
  box-shadow: 0 0.5rem 1rem 0 rgba(0, 0, 0, 0.15);
  color: $col-button-raised-txt;

  &[disabled] {
    box-shadow: none;
    opacity: 0.5;
  }
}
@mixin button-accent () {
  @include button();
  transition: 0.3s ease-out;
  color: $col-button-flat-accent-txt;

  &[disabled] {
    color: $col-button-flat-accent-disabled-txt;
  }

  &:not([disabled]):hover {
    background-color: $col-button-flat-accent-hover;
  }
}
@mixin button-flat () {
  @include button();

  color: $col-button-flat-txt;
  transition: 0.3s ease-out;

  &[disabled] {
    color: $col-button-flat-disabled-txt;
  }

  &:not([disabled]):hover {
    background-color: $col-button-flat-hover;
  }
}
@mixin box-shadow () {
  box-shadow: 0 0.4rem 1rem 0 rgba(0, 0, 0, 0.15);
}
@mixin respond-to($media) {
  @if $media == xsmall {
    @media only screen and (max-width: $x-small - 1px) {
      @content;

    }
  }

  @else if $media == small {
    @media only screen and (max-width: $small - 1px) {
      @content;
    }
  }
  @else if $media == tablet {
    @media only screen and (max-width: $tablet - 1px) {
      @content;
    }
  }
  @else if $media == medium {
    @media only screen and (max-width: $medium) {
      @content;
    }
  }
  @else if $media == xmedium {
    @media only screen and (max-width: $x-medium - 1px) {
      @content;
    }
  }
  @else if $media == large {
    @media only screen and (max-width: $large - 1px) {
      @content;
    }
  }
  @else if $media == xlarge {
    @media only screen and (max-width: $x-large - 1px) {
      @content;
    }
  }
  @else {
    @media only screen and (max-width: $media) {
      @content;
    }
  }
}
@mixin respond-to-height($media) {
  @media only screen and (max-height: $media) {
    @content;
  }
}
@mixin respond-to-custom($media) {
  @media only screen and (max-width: $media) {
    @content;
  }
}

// Fields mixins
@mixin input-paddings {
  font-size: $field-text-font-size;
  line-height: $field-text-line-height;
}
@mixin text-font-sizes {
  font-size: $field-text-font-size;
  line-height: $field-text-line-height;
}
@mixin label-font-sizes {
  font-size: $field-label-font-size;
  line-height: $field-label-line-height;
}
@mixin material-border($color-focused, $color-unfocused, $focused-selector:'') {
  border-bottom: 0.1rem solid $color-unfocused;
  background: radial-gradient($color-focused, $color-focused) bottom -0.1rem center no-repeat;
  background-size: 0 0.2rem;
  -webkit-transition-property: background-size, border-color;
  -moz-transition-property: background-size, border-color;
  -ms-transition-property: background-size, border-color;
  -o-transition-property: background-size, border-color;
  transition-property: background-size, border-color;
  transition-duration: $field-transition-duration;

  @if $focused-selector != '' {
    #{$focused-selector},
    &:focus {
      background-size: 100% 0.2rem;
    }
  }

  @else {
    &:focus {
      background-size: 100% 0.2rem;
    }
  }
}
@mixin readonly-material-border($color) {
  border-bottom: 0.1rem dashed $color;
  background: none;
}

@mixin placeholder {
  color: $field-placeholer-color;
  transition: opacity $field-transition-duration;
}
